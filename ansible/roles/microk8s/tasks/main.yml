---
- name: ensure snapd is installed
  apt:
    name: snapd
    state: present

- name: wait for snap to be loaded...
  shell: snap wait system seed.loaded

- name: install microk8s --classic --channel={{ microk8s_channel | default("1.18/stable") }}
  snap:
    name: microk8s
    classic: yes
    channel: "{{ microk8s_channel | default('1.18/stable') }}"

- name: wait for microk8s to become ready...
  shell: microk8s status --wait-ready

- name: enable microk8s services
  shell: microk8s enable dns helm

# https://github.com/ubuntu/microk8s/blob/0b22fbb8fb44fdf673698c4703496a5235fc9d3f/microk8s-resources/actions/ingress.yaml
# with `--publish-status-address={{ inventory_hostname }}` arg added
- name: enable munged microk8s ingress, allowing external access
  template:
    src: ../templates/ingress.yml
    dest: $PWD/ingress.yml

- name: apply microk8s ingress manifest
  shell: microk8s kubectl apply -f $PWD/ingress.yml

- name: remove tmp microk8s ingress manifest
  file:
    path: $PWD/ingress.yml
    state: absent

- name: generate kubeconfig
  shell: microk8s config > $PWD/kubeconfig

- name: ensure external ip address is in kubeconfig
  replace:
    path: $PWD/kubeconfig
    regexp: "server: https://[0-9\\.]+:16443"
    replace: "server: https://{{ ansible_host }}:16443"

- fetch:
    src: $PWD/kubeconfig
    dest: "{{ inventory_dir }}/../../private/"
    flat: yes
- file:
    path: $PWD/kubeconfig
    state: absent

# Workaround to be able to connect to microk8s remotely
- import_tasks: "{{ role_path }}/tasks/remote-hacks.yml"

- name: helm init
  shell: microk8s helm init

- name: ensure coredns has started...
  shell: microk8s kubectl rollout status deployment/coredns -n kube-system
